from rest_framework import serializers
from django.contrib.auth.models import User
from .models import *

# Auto-generated Serializers from entities.json config
# Generated by: DjangoBackend/generate_serializers.py

# ============================================================================
# BASIC SERIALIZERS
# ============================================================================

class PlayerSerializer(serializers.ModelSerializer):
    """
    Basic serializer for Player model
    Handles standard CRUD operations with configurable depth
    """

    def validate_username(self, value):
        """Validate uniqueness of username"""
        if value:
            # Add custom uniqueness validation if needed
            pass
        return value

    def validate_email(self, value):
        """Validate email field"""
        if value and not '@' in value:
            raise serializers.ValidationError('Invalid email format')
        return value

    def create(self, validated_data):
        """Custom create method for Player"""
        # Handle nested relationships if needed
        return Player.objects.create(**validated_data)

    def update(self, instance, validated_data):
        """Custom update method for Player"""
        # Handle nested relationships if needed
        for attr, value in validated_data.items():
            setattr(instance, attr, value)
        instance.save()
        return instance

    class Meta:
        model = Player
        fields = '__all__'
        depth = 1


class MatchSerializer(serializers.ModelSerializer):
    """
    Basic serializer for Match model
    Handles standard CRUD operations with configurable depth
    """

    # Nested serializer for winner (uncomment to enable)
    # winner_detail = PlayerSerializer(source='winner', read_only=True)

    def validate_match_id(self, value):
        """Validate uniqueness of match_id"""
        if value:
            # Add custom uniqueness validation if needed
            pass
        return value

    def create(self, validated_data):
        """Custom create method for Match"""
        # Handle nested relationships if needed
        return Match.objects.create(**validated_data)

    def update(self, instance, validated_data):
        """Custom update method for Match"""
        # Handle nested relationships if needed
        for attr, value in validated_data.items():
            setattr(instance, attr, value)
        instance.save()
        return instance

    class Meta:
        model = Match
        fields = '__all__'
        depth = 1


class ItemSerializer(serializers.ModelSerializer):
    """
    Basic serializer for Item model
    Handles standard CRUD operations with configurable depth
    """

    def create(self, validated_data):
        """Custom create method for Item"""
        # Handle nested relationships if needed
        return Item.objects.create(**validated_data)

    def update(self, instance, validated_data):
        """Custom update method for Item"""
        # Handle nested relationships if needed
        for attr, value in validated_data.items():
            setattr(instance, attr, value)
        instance.save()
        return instance

    class Meta:
        model = Item
        fields = '__all__'
        depth = 1


class GuildSerializer(serializers.ModelSerializer):
    """
    Basic serializer for Guild model
    Handles standard CRUD operations with configurable depth
    """

    def validate_name(self, value):
        """Validate uniqueness of name"""
        if value:
            # Add custom uniqueness validation if needed
            pass
        return value

    def create(self, validated_data):
        """Custom create method for Guild"""
        # Handle nested relationships if needed
        return Guild.objects.create(**validated_data)

    def update(self, instance, validated_data):
        """Custom update method for Guild"""
        # Handle nested relationships if needed
        for attr, value in validated_data.items():
            setattr(instance, attr, value)
        instance.save()
        return instance

    class Meta:
        model = Guild
        fields = '__all__'
        depth = 1


# ============================================================================
# LIST SERIALIZERS (Optimized for list views)
# ============================================================================

class PlayerListSerializer(serializers.ModelSerializer):
    """
    Lightweight serializer for Player list views
    Optimized for performance with minimal fields
    """

    class Meta:
        model = Player
        fields = ['id', 'username', 'email', 'created_at']  # Limit to 6 most important fields
        read_only_fields = ['id']


class MatchListSerializer(serializers.ModelSerializer):
    """
    Lightweight serializer for Match list views
    Optimized for performance with minimal fields
    """

    class Meta:
        model = Match
        fields = ['id', 'match_id']  # Limit to 6 most important fields
        read_only_fields = ['id']


class ItemListSerializer(serializers.ModelSerializer):
    """
    Lightweight serializer for Item list views
    Optimized for performance with minimal fields
    """

    class Meta:
        model = Item
        fields = ['id', 'name']  # Limit to 6 most important fields
        read_only_fields = ['id']


class GuildListSerializer(serializers.ModelSerializer):
    """
    Lightweight serializer for Guild list views
    Optimized for performance with minimal fields
    """

    class Meta:
        model = Guild
        fields = ['id', 'name', 'created_at']  # Limit to 6 most important fields
        read_only_fields = ['id']


# ============================================================================
# NESTED SERIALIZERS (With related objects)
# ============================================================================

class PlayerNestedSerializer(serializers.ModelSerializer):
    """
    Nested serializer for Player with related objects
    Use for detailed views where you need related data
    """

    match_set = MatchSerializer(many=True, read_only=True)

    class Meta:
        model = Player
        fields = '__all__'
        depth = 0  # Explicit depth to avoid infinite recursion


class MatchNestedSerializer(serializers.ModelSerializer):
    """
    Nested serializer for Match with related objects
    Use for detailed views where you need related data
    """

    winner = PlayerSerializer(read_only=True)

    class Meta:
        model = Match
        fields = '__all__'
        depth = 0  # Explicit depth to avoid infinite recursion


class ItemNestedSerializer(serializers.ModelSerializer):
    """
    Nested serializer for Item with related objects
    Use for detailed views where you need related data
    """

    class Meta:
        model = Item
        fields = '__all__'
        depth = 0  # Explicit depth to avoid infinite recursion


class GuildNestedSerializer(serializers.ModelSerializer):
    """
    Nested serializer for Guild with related objects
    Use for detailed views where you need related data
    """

    class Meta:
        model = Guild
        fields = '__all__'
        depth = 0  # Explicit depth to avoid infinite recursion


# ============================================================================
# CREATE/UPDATE SERIALIZERS (Optimized for forms)
# ============================================================================

class PlayerCreateUpdateSerializer(serializers.ModelSerializer):
    """
    Serializer optimized for Player create/update operations
    Excludes auto-generated fields and focuses on user input
    """

    class Meta:
        model = Player
        fields = '__all__'
        read_only_fields = ['id', 'created_at']


class MatchCreateUpdateSerializer(serializers.ModelSerializer):
    """
    Serializer optimized for Match create/update operations
    Excludes auto-generated fields and focuses on user input
    """

    class Meta:
        model = Match
        fields = '__all__'
        read_only_fields = ['id']


class ItemCreateUpdateSerializer(serializers.ModelSerializer):
    """
    Serializer optimized for Item create/update operations
    Excludes auto-generated fields and focuses on user input
    """

    class Meta:
        model = Item
        fields = '__all__'
        read_only_fields = ['id']


class GuildCreateUpdateSerializer(serializers.ModelSerializer):
    """
    Serializer optimized for Guild create/update operations
    Excludes auto-generated fields and focuses on user input
    """

    class Meta:
        model = Guild
        fields = '__all__'
        read_only_fields = ['id', 'created_at']


# ============================================================================
# UTILITY FUNCTIONS
# ============================================================================

def get_serializer_for_model(model_name, serializer_type='basic'):
    """Get appropriate serializer class for a model"""
    serializers_map = {
        'player': {
            'basic': PlayerSerializer,
            'list': PlayerListSerializer,
            'nested': PlayerNestedSerializer,
            'create_update': PlayerCreateUpdateSerializer,
        },
        'match': {
            'basic': MatchSerializer,
            'list': MatchListSerializer,
            'nested': MatchNestedSerializer,
            'create_update': MatchCreateUpdateSerializer,
        },
        'item': {
            'basic': ItemSerializer,
            'list': ItemListSerializer,
            'nested': ItemNestedSerializer,
            'create_update': ItemCreateUpdateSerializer,
        },
        'guild': {
            'basic': GuildSerializer,
            'list': GuildListSerializer,
            'nested': GuildNestedSerializer,
            'create_update': GuildCreateUpdateSerializer,
        },
    }
    
    model_serializers = serializers_map.get(model_name.lower(), {})
    return model_serializers.get(serializer_type)

def get_all_serializers():
    """Get all available serializers"""
    return {
        'Player': PlayerSerializer,
        'Match': MatchSerializer,
        'Item': ItemSerializer,
        'Guild': GuildSerializer,
    }